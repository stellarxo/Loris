#!/usr/bin/php
<?php
/**
* CBCL Scoring
*
* PHP version 5
*
* @category Instrument
* @package  CBCL_Instrument
* @author   Rathi Gnanasekaran <sekaranrathi@gmail.com>
* @license  Loris License
* @link     https://github.com/aces/IBIS
*/

require_once "../tools/generic_includes.php";
require_once "Database.class.inc";
require_once "NDB_BVL_Instrument.class.inc";
require_once "TimePoint.class.inc";
$CommentID = $argv[1];
$db        =& Database::singleton();

$query         = "SELECT * from aims WHERE CommentID = :CommentID";
$WhereCriteria = array('CommentID'=>$CommentID);
$record        = array();
$record        = $db->pselectRow($query, $WhereCriteria);
$instrument =& NDB_BVL_Instrument::factory('aims', $record['CommentID'], null, false);
if($instrument->getSessionID() != NULL) { //quickform_parser doesn't use any specific session
     $timepoint =& TimePoint::singleton($instrument->getSessionID());
     $dob = $timepoint->getEffectiveDateOfBirth();
}

$scores = array();
if ($record['prone_first_item'] != null & $record['prone_last_item'] != null) {
    $scores['prone_prev_itemscredited']   = 0;
    $scores['prone_window_itemscredited'] = 0;
    $scores['prone_subscalescore']        = 0;
    $beg_prone                            = $record['prone_first_item'];
    $end_prone                            = $record['prone_last_item'];
    if ($end_prone < $beg_prone) {
        $scores['data_entry_error'] = 'Prone: Window is not set properly';
        print "Error in data Entry". $scores['data_entry_error'];
        exit(4);
    }   
}
if ($record['supine_first_item'] != null & $record['supine_last_item'] != null) {
    $scores['supine_prev_itemscredited']   = 0;
    $scores['supine_window_itemscredited'] = 0;
    $scores['supine_subscalescore']        = 0;
    $beg_supine                            = $record['supine_first_item'];
    $end_supine                            = $record['supine_last_item'];
    if ($end_supine < $beg_supine) {
        $scores['data_entry_error'] ='Supine: Windown is not set properly';
        print "Error in data Entry". $scores['data_entry_error'];
        exit(4);
    }
}
if ($record['sit_first_item'] != null & $record['sit_last_item'] != null) {
    $scores['sit_prev_itemscredited']   = 0;
    $scores['sit_window_itemscredited'] = 0;
    $scores['sit_subscalescore']        = 0;
    $beg_sit                            = $record['sit_first_item'];
    $end_sit                            = $record['sit_last_item'];
    if ($end_sit < $beg_sit) {
        $scores['data_entry_error'] = 'Sitting: Window is not set properly';
        print "Error in data Entry". $scores['data_entry_error'];
        exit(4);
    }
}
if ($record['stand_first_item'] != null & $record['stand_last_item'] != null) {
    $scores['stand_prev_itemscredited']   = 0;
    $scores['stand_window_itemscredited'] = 0;
    $scores['stand_subscalescore']        = 0;
    $beg_stand                            = $record['stand_first_item'];
    $end_stand                            = $record['stand_last_item'];
    if ($end_stand < $beg_stand) {
        $scores['data_entry_error'] = 'Standing: Window is not set properly';
        print "Error in data Entry". $scores['data_entry_error'];
        exit(4);
    }

}

$scores['data_entry_error'] = " ";

$in_window   = array('observed','not_observed');
$out_window  = array('above_ceiling','not_answered');
$error_count = array('prone_above'=>0,'prone_within'=>0,'prone_below'=>0,
                     'supine_above'=>0,'supine_within'=>0,'supine_below'=>0,
                     'sit_above'=>0,'sit_within'=>0,'sit_below'=>0,
                     'stand_above'=>0,'stand_within'=>0,'stand_below'=>0);

foreach ($record as $field => $value) {
    $num  = explode("_", $field);
    $qstn = substr($num[0], 1); // returns question number
    if ($qstn >=1 & $value != null ) {
        if ($record['prone_first_item'] != null & 
            $record['prone_last_item'] != null) { 
            if ($qstn >= 1 & $qstn < $beg_prone & 
                isset($scores['prone_prev_itemscredited'])) {
                //prone related questions
                if ($value == 'credited') {
                    $scores['prone_prev_itemscredited']++;

                } else {
                    if ($error_count['prone_above'] == 0) { 
                        $scores['data_entry_error'] .= 'Prone:Error below 
                                                        window<br/>';
                        $error_count['prone_above']++;
                    }
                }
            } elseif ( $qstn >= $beg_prone & $qstn <= $end_prone & 
                       isset($scores['prone_window_itemscredited'])) {
                if ($value == 'observed') {
                    $scores['prone_window_itemscredited']++;
                } else {
                    if (!in_array($value, $in_window) & 
                        $error_count['prone_within'] == 0 ) {
                        $scores['data_entry_error'] .= 'Prone:Error within 
                                                        window<br/>';
                        $error_count['prone_within']++;
                    }
                } 
            } elseif ($qstn >$end_prone & $qstn <=21) {
                if (!in_array($value, $out_window) & 
                    $error_count['prone_below'] ==0 ) {
                    $scores['data_entry_error'] .= 'Prone:Error above 
                                                    window<br/>';
                    $error_count['prone_below']++;
                }
            }
            if ( isset($scores['prone_prev_itemscredited']) & 
                isset($scores['prone_window_itemscredited'])) {  
                $scores['prone_subscalescore'] = $scores['prone_prev_itemscredited'] 
                                               + $scores['prone_window_itemscredited'];
            }
        }
        if ($record['supine_first_item'] != null & 
            $record['supine_last_item'] != null) {

            if ($qstn >=22 & $qstn < $beg_supine &
                isset($scores['supine_prev_itemscredited'])) {
                //supine related questions
                if ($value == 'credited') {
                    $scores['supine_prev_itemscredited']++;

                } else {
                    if ($error_count['supine_above']==0) { 
                        $scores['data_entry_error'] .='Supine:Error below window<br/>';
                        $error_count['supine_above']++;
                    }
                }
            } elseif ( $qstn >= $beg_supine & $qstn <= $end_supine & 
                       isset($scores['supine_window_itemscredited'])) {
                if ($value == 'observed') {
                    $scores['supine_window_itemscredited']++;
                } else {
                    if (! in_array($value, $in_window) &
                        $error_count['supine_within'] == 0) {
                        $scores['data_entry_error'] .='Supine:Error within window<br/>';
                        $error_count['supine_within']++;
                    }
                }
            } elseif ( isset($end_supine) & $qstn > $end_supine & $qstn <= 30) {
                if (! in_array($value, $out_window) & 
                    $error_count['supine_below']==0) {
                    $scores['data_entry_error'] .='Supine:Error above window<br/>';
                    $error_count['supine_below']++;
                }
            }
            if (isset($scores['supine_prev_itemscredited']) & 
                isset( $scores['supine_window_itemscredited'])) {
                $scores['supine_subscalescore'] = $scores['supine_prev_itemscredited'] 
                                                  + $scores['supine_window_itemscredited'];
            } 
        }
        if ($record['sit_first_item'] != null & $record['sit_last_item'] != null) {
            if ($qstn >= 31 & $qstn < $beg_sit & 
                isset($scores['sit_prev_itemscredited'])) {
                //Sitting related questions
                if ($value == 'credited') {
                    $scores['sit_prev_itemscredited']++;

                } else {
                    if ($error_count['sit_above'] ==0) {
                        $scores['data_entry_error'] .='Sitting:Error below window<br/>';
                        $error_count['sit_above']++;
                    } 
                }
            } elseif ($qstn >= $beg_sit & $qstn <= $end_sit & 
                      isset($scores['sit_window_itemscredited'])) {     
                if ($value == 'observed') {
                    $scores['sit_window_itemscredited']++;
                } else {
                    if (!in_array($value, $in_window) && $error_count['sit_within'] ==0) {
                        $scores['data_entry_error'] .='Sitting:Error within window<br/>';
                        $error_count['sit_within']++;
                    }
                }
            } elseif ($qstn >$end_sit & $qstn <=42) {
                if (! in_array($value, $out_window) && $error_count['sit_below']==0) {
                    $scores['data_entry_error'] .='Sitting:Error above window <br/>';
                    $error_count['sit_below']++;
                }
            }
            if (isset($scores['sit_prev_itemscredited']) & 
                isset($scores['sit_window_itemscredited'])) {
                $scores['sit_subscalescore'] = $scores['sit_prev_itemscredited'] 
                                               + $scores['sit_window_itemscredited'];
            }
        }
        if ($record['stand_first_item'] != null & $record['stand_last_item'] != null) {
            if ($qstn >= 43 & $qstn < $beg_stand & isset($scores['stand_prev_itemscredited'])) {
                //Standing related questions
                if ($value == 'credited') {
                    $scores['stand_prev_itemscredited']++;
                } else {
                    if ($error_count['stand_above'] ==0) { 
                        $scores['data_entry_error'] .='Standing:Error below window<br/>';
                        $error_count['stand_above']++;
                    }
                } 
            } elseif ($qstn >= $beg_stand & $qstn <= $end_stand & 
                    isset($scores['stand_window_itemscredited'])) {
                if ($value == 'observed') {
                    $scores['stand_window_itemscredited']++;
                } else {
                    if (!in_array($value, $in_window) && $error_count['stand_within'] ==0) {
                        $scores['data_entry_error'] .='Standing:Error within window<br/>';
                        $error_count['stand_within']++;
                    }
                } 
            } elseif ($qstn > $end_stand & $qstn <=58) {
                if (! in_array($value, $out_window) && $error_count['stand_below']==0) { 
                    $scores['data_entry_error'] .= 'Standing:Error above window<br/>';
                    $error_count['stand_below']++;
                }
            }
            if ( isset($scores['stand_prev_itemscredited']) & 
                 isset( $scores['stand_window_itemscredited'])) {
                $scores['stand_subscalescore'] = $scores['stand_prev_itemscredited'] 
                                                 + $scores['stand_window_itemscredited'];
            }
        }
    }
}
$scores['total_score'] = $scores['prone_subscalescore']+ $scores['supine_subscalescore']+
                        $scores['sit_subscalescore']+$scores['stand_subscalescore'];
if(!empty($dob) && !empty($record['Date_taken'])) {
    $age = Utility::calculateAge($dob, $record["Date_taken"]);
}
if(isset($age) && is_array($age)) { 
	$Age = $age['year'] * 12 + $age['mon'];
}
if ($scores['total_score'] > 0) {

    $scores['percentile'] = '';
    //print "AGE $Age";
    $query_score          = "SELECT Percentile from aims_lookup WHERE Rawscore = :val_score 
                             AND Age = :val_age";
    $WhereCriteria_p      = array('val_score'=>$scores['total_score'],'val_age'=>$Age);
    $percentile           =  $db->pselectOne($query_score, $WhereCriteria_p);
    if(is_array($percentile)) {
        $scores['percentile'] = 'N/A';
    } else {
	    if (is_int($percentile)) {
		    if ($percentile == 0) {
			    $scores['percentile'] = '<1';
		    } else if ($percentile == 100) {
			    $scores['percentile'] = '>99';
		    } else {
			    $scores['percentile'] = $percentile;
		    }
	    } else {
		    $scores['percentile'] =$percentile;   
	    }
    }
    //save scores
    $result = $db->update('aims', $scores, $WhereCriteria);

}
exit(0);

?>
